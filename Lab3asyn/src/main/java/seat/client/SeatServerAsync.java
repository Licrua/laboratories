
package seat.client;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SeatServerAsync", targetNamespace = "http://seat/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SeatServerAsync {


    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<seat.client.GetListCarSeatResponse>
     */
    @WebMethod(operationName = "getListCarSeat")
    @RequestWrapper(localName = "getListCarSeat", targetNamespace = "http://seat/", className = "seat.client.GetListCarSeat")
    @ResponseWrapper(localName = "getListCarSeatResponse", targetNamespace = "http://seat/", className = "seat.client.GetListCarSeatResponse")
    public Response<GetListCarSeatResponse> getListCarSeatAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getListCarSeat")
    @RequestWrapper(localName = "getListCarSeat", targetNamespace = "http://seat/", className = "seat.client.GetListCarSeat")
    @ResponseWrapper(localName = "getListCarSeatResponse", targetNamespace = "http://seat/", className = "seat.client.GetListCarSeatResponse")
    public Future<?> getListCarSeatAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetListCarSeatResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<seat.CarSeat>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListCarSeat", targetNamespace = "http://seat/", className = "seat.client.GetListCarSeat")
    @ResponseWrapper(localName = "getListCarSeatResponse", targetNamespace = "http://seat/", className = "seat.client.GetListCarSeatResponse")
    @Action(input = "http://seat/SeatServerAsync/getListCarSeatRequest", output = "http://seat/SeatServerAsync/getListCarSeatResponse")
    public List<CarSeat> getListCarSeat();

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<seat.client.GetListBabyCarriageResponse>
     */
    @WebMethod(operationName = "getListBabyCarriage")
    @RequestWrapper(localName = "getListBabyCarriage", targetNamespace = "http://seat/", className = "seat.client.GetListBabyCarriage")
    @ResponseWrapper(localName = "getListBabyCarriageResponse", targetNamespace = "http://seat/", className = "seat.client.GetListBabyCarriageResponse")
    public Response<GetListBabyCarriageResponse> getListBabyCarriageAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getListBabyCarriage")
    @RequestWrapper(localName = "getListBabyCarriage", targetNamespace = "http://seat/", className = "seat.client.GetListBabyCarriage")
    @ResponseWrapper(localName = "getListBabyCarriageResponse", targetNamespace = "http://seat/", className = "seat.client.GetListBabyCarriageResponse")
    public Future<?> getListBabyCarriageAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetListBabyCarriageResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<seat.BabyCarriage>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListBabyCarriage", targetNamespace = "http://seat/", className = "seat.client.GetListBabyCarriage")
    @ResponseWrapper(localName = "getListBabyCarriageResponse", targetNamespace = "http://seat/", className = "seat.client.GetListBabyCarriageResponse")
    @Action(input = "http://seat/SeatServerAsync/getListBabyCarriageRequest", output = "http://seat/SeatServerAsync/getListBabyCarriageResponse")
    public List<BabyCarriage> getListBabyCarriage();

}
